name: CI

on:
  push:
    branches:
      - master
  pull_request: { }
  workflow_dispatch: { }

env:
  CARGO_TERM_COLOR: always
  FRB_MAIN_RUST_VERSION: 1.83.0
  FRB_MAIN_DART_VERSION: 3.4.0
  FRB_MAIN_FLUTTER_VERSION: 3.22.0

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test_dart_web:
    name: 'Test :: Dart :: Web'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package:
          - frb_example--dart_minimal
          # no need for `frb_example--deliberate_bad`, `frb_example--dart_build_rs`

    steps:
      # setup
      - uses: catchpoint/workflow-telemetry-action@v1
        with:
          comment_on_pr: false
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      # https://github.com/puppeteer/puppeteer/pull/13196
      - name: Disable AppArmor
        run: echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.FRB_MAIN_DART_VERSION }}
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly-2024-06-01
          target: wasm32-unknown-unknown
          components: rust-src,rustfmt
      - name: Cache dependencies
        id: test-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
            frb_example--pure_dart/rust/target/
            frb_example--pure_dart/.local-chromium
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install crates
        if: steps.test-cache.outputs.cache-hit != 'true'
        run: |
          sh -c "$(curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf)" '' -f

      # execute
      - run: ./frb_internal test-dart-web --package ${{ matrix.package }}
